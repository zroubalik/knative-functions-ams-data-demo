{"ast":null,"code":"import _slicedToArray from \"/Users/zroubali/knative-functions-ams-data-demo/ams-data-app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from './getInitColorSchemeScript';\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && mode === 'system') {\n    var mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      return 'dark';\n    }\n    return 'light';\n  }\n  return undefined;\n}\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n  return undefined;\n}\nexport function getColorScheme(state) {\n  return processState(state, function (mode) {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n    return undefined;\n  });\n}\nfunction initializeValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n  var value;\n  try {\n    value = localStorage.getItem(key) || undefined;\n    if (!value) {\n      // the first time that user enters the site.\n      localStorage.setItem(key, defaultValue);\n    }\n  } catch (e) {\n    // Unsupported\n  }\n  return value || defaultValue;\n}\nexport default function useCurrentColorScheme(options) {\n  var _options$defaultMode = options.defaultMode,\n    defaultMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n    defaultLightColorScheme = options.defaultLightColorScheme,\n    defaultDarkColorScheme = options.defaultDarkColorScheme,\n    _options$supportedCol = options.supportedColorSchemes,\n    supportedColorSchemes = _options$supportedCol === void 0 ? [] : _options$supportedCol,\n    _options$modeStorageK = options.modeStorageKey,\n    modeStorageKey = _options$modeStorageK === void 0 ? DEFAULT_MODE_STORAGE_KEY : _options$modeStorageK,\n    _options$colorSchemeS = options.colorSchemeStorageKey,\n    colorSchemeStorageKey = _options$colorSchemeS === void 0 ? DEFAULT_COLOR_SCHEME_STORAGE_KEY : _options$colorSchemeS,\n    _options$storageWindo = options.storageWindow,\n    storageWindow = _options$storageWindo === void 0 ? typeof window === 'undefined' ? undefined : window : _options$storageWindo;\n  var joinedColorSchemes = supportedColorSchemes.join(',');\n  var _React$useState = React.useState(function () {\n      var initialMode = initializeValue(modeStorageKey, defaultMode);\n      var lightColorScheme = initializeValue(\"\".concat(colorSchemeStorageKey, \"-light\"), defaultLightColorScheme);\n      var darkColorScheme = initializeValue(\"\".concat(colorSchemeStorageKey, \"-dark\"), defaultDarkColorScheme);\n      return {\n        mode: initialMode,\n        systemMode: getSystemMode(initialMode),\n        lightColorScheme: lightColorScheme,\n        darkColorScheme: darkColorScheme\n      };\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    state = _React$useState2[0],\n    setState = _React$useState2[1];\n  var colorScheme = getColorScheme(state);\n  var setMode = React.useCallback(function (mode) {\n    setState(function (currentState) {\n      if (mode === currentState.mode) {\n        // do nothing if mode does not change\n        return currentState;\n      }\n      var newMode = !mode ? defaultMode : mode;\n      try {\n        localStorage.setItem(modeStorageKey, newMode);\n      } catch (e) {\n        // Unsupported\n      }\n      return _extends({}, currentState, {\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      });\n    });\n  }, [modeStorageKey, defaultMode]);\n  var setColorScheme = React.useCallback(function (value) {\n    if (!value) {\n      setState(function (currentState) {\n        try {\n          localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-light\"), defaultLightColorScheme);\n          localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-dark\"), defaultDarkColorScheme);\n        } catch (e) {\n          // Unsupported\n        }\n        return _extends({}, currentState, {\n          lightColorScheme: defaultLightColorScheme,\n          darkColorScheme: defaultDarkColorScheme\n        });\n      });\n    } else if (typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(\"`\".concat(value, \"` does not exist in `theme.colorSchemes`.\"));\n      } else {\n        setState(function (currentState) {\n          var newState = _extends({}, currentState);\n          processState(currentState, function (mode) {\n            try {\n              localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-\").concat(mode), value);\n            } catch (e) {\n              // Unsupported\n            }\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else {\n      setState(function (currentState) {\n        var newState = _extends({}, currentState);\n        var newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        var newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n        if (newLightColorScheme) {\n          if (!joinedColorSchemes.includes(newLightColorScheme)) {\n            console.error(\"`\".concat(newLightColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n          } else {\n            newState.lightColorScheme = newLightColorScheme;\n            try {\n              localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-light\"), newLightColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        if (newDarkColorScheme) {\n          if (!joinedColorSchemes.includes(newDarkColorScheme)) {\n            console.error(\"`\".concat(newDarkColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n          } else {\n            newState.darkColorScheme = newDarkColorScheme;\n            try {\n              localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-dark\"), newDarkColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        return newState;\n      });\n    }\n  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);\n  var handleMediaQuery = React.useCallback(function (e) {\n    if (state.mode === 'system') {\n      setState(function (currentState) {\n        return _extends({}, currentState, {\n          systemMode: e != null && e.matches ? 'dark' : 'light'\n        });\n      });\n    }\n  }, [state.mode]);\n\n  // Ref hack to avoid adding handleMediaQuery as a dep\n  var mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(function () {\n    var handler = function handler() {\n      return mediaListener.current.apply(mediaListener, arguments);\n    };\n\n    // Always listen to System preference\n    var media = window.matchMedia('(prefers-color-scheme: dark)');\n\n    // Intentionally use deprecated listener methods to support iOS & old browsers\n    media.addListener(handler);\n    handler(media);\n    return function () {\n      return media.removeListener(handler);\n    };\n  }, []);\n\n  // Handle when localStorage has changed\n  React.useEffect(function () {\n    var handleStorage = function handleStorage(event) {\n      var value = event.newValue;\n      if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n        // If the key is deleted, value will be null then reset color scheme to the default one.\n        if (event.key.endsWith('light')) {\n          setColorScheme({\n            light: value\n          });\n        }\n        if (event.key.endsWith('dark')) {\n          setColorScheme({\n            dark: value\n          });\n        }\n      }\n      if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n        setMode(value || defaultMode);\n      }\n    };\n    if (storageWindow) {\n      // For syncing color-scheme changes between iframes\n      storageWindow.addEventListener('storage', handleStorage);\n      return function () {\n        return storageWindow.removeEventListener('storage', handleStorage);\n      };\n    }\n    return undefined;\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);\n  return _extends({}, state, {\n    colorScheme: colorScheme,\n    setMode: setMode,\n    setColorScheme: setColorScheme\n  });\n}","map":null,"metadata":{},"sourceType":"module"}