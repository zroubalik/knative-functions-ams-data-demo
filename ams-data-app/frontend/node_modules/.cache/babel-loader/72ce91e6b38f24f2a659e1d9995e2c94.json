{"ast":null,"code":"import _slicedToArray from \"/Users/zroubali/kubecon-eu-2023-demo/ams-data-app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { ListActionTypes } from './listActions.types';\nimport defaultReducer from './listReducer';\nimport useListChangeNotifiers from './useListChangeNotifiers';\nimport useControllableReducer from '../utils/useControllableReducer';\nimport areArraysEqual from '../utils/areArraysEqual';\nimport useLatest from '../utils/useLatest';\nimport useTextNavigation from '../utils/useTextNavigation';\nvar EMPTY_OBJECT = {};\nvar NOOP = function NOOP() {};\nvar defaultItemComparer = function defaultItemComparer(optionA, optionB) {\n  return optionA === optionB;\n};\nvar defaultIsItemDisabled = function defaultIsItemDisabled() {\n  return false;\n};\nvar defaultItemStringifier = function defaultItemStringifier(item) {\n  return typeof item === 'string' ? item : String(item);\n};\nvar defaultGetInitialState = function defaultGetInitialState() {\n  return {\n    highlightedValue: null,\n    selectedValues: []\n  };\n};\n\n/**\n * The useList is a lower-level utility that is used to build list-like components.\n * It's used to manage the state of the list and its items.\n *\n * Supports highlighting a single item and selecting an arbitrary number of items.\n *\n * The state of the list is managed by a controllable reducer - that is a reducer that can have its state\n * controlled from outside.\n *\n * By default, the state consists of `selectedValues` and `highlightedValue` but can be extended by the caller of the hook.\n * Also the actions that can be dispatched and the reducer function can be defined externally.\n *\n * @template ItemValue The type of the item values.\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n *\n * @ignore - internal hook.\n */\nfunction useList(params) {\n  var _params$controlledPro = params.controlledProps,\n    controlledProps = _params$controlledPro === void 0 ? EMPTY_OBJECT : _params$controlledPro,\n    _params$disabledItems = params.disabledItemsFocusable,\n    disabledItemsFocusable = _params$disabledItems === void 0 ? false : _params$disabledItems,\n    _params$disableListWr = params.disableListWrap,\n    disableListWrap = _params$disableListWr === void 0 ? false : _params$disableListWr,\n    _params$focusManageme = params.focusManagement,\n    focusManagement = _params$focusManageme === void 0 ? 'activeDescendant' : _params$focusManageme,\n    _params$getInitialSta = params.getInitialState,\n    getInitialState = _params$getInitialSta === void 0 ? defaultGetInitialState : _params$getInitialSta,\n    getItemDomElement = params.getItemDomElement,\n    getItemId = params.getItemId,\n    _params$isItemDisable = params.isItemDisabled,\n    isItemDisabled = _params$isItemDisable === void 0 ? defaultIsItemDisabled : _params$isItemDisable,\n    externalListRef = params.rootRef,\n    _params$onStateChange = params.onStateChange,\n    onStateChange = _params$onStateChange === void 0 ? NOOP : _params$onStateChange,\n    items = params.items,\n    _params$itemComparer = params.itemComparer,\n    itemComparer = _params$itemComparer === void 0 ? defaultItemComparer : _params$itemComparer,\n    _params$getItemAsStri = params.getItemAsString,\n    getItemAsString = _params$getItemAsStri === void 0 ? defaultItemStringifier : _params$getItemAsStri,\n    onChange = params.onChange,\n    onHighlightChange = params.onHighlightChange,\n    _params$orientation = params.orientation,\n    orientation = _params$orientation === void 0 ? 'vertical' : _params$orientation,\n    _params$pageSize = params.pageSize,\n    pageSize = _params$pageSize === void 0 ? 5 : _params$pageSize,\n    _params$reducerAction = params.reducerActionContext,\n    reducerActionContext = _params$reducerAction === void 0 ? EMPTY_OBJECT : _params$reducerAction,\n    _params$selectionMode = params.selectionMode,\n    selectionMode = _params$selectionMode === void 0 ? 'single' : _params$selectionMode,\n    externalReducer = params.stateReducer;\n  if (process.env.NODE_ENV !== 'production') {\n    if (focusManagement === 'DOM' && getItemDomElement == null) {\n      throw new Error('useList: The `getItemDomElement` prop is required when using the `DOM` focus management.');\n    }\n    if (focusManagement === 'activeDescendant' && getItemId == null) {\n      throw new Error('useList: The `getItemId` prop is required when using the `activeDescendant` focus management.');\n    }\n  }\n  var listRef = React.useRef(null);\n  var handleRef = useForkRef(externalListRef, listRef);\n  var handleHighlightChange = React.useCallback(function (event, value, reason) {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, value, reason);\n    if (focusManagement === 'DOM' && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\n      var _getItemDomElement;\n      getItemDomElement == null ? void 0 : (_getItemDomElement = getItemDomElement(value)) == null ? void 0 : _getItemDomElement.focus();\n    }\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\n  var stateComparers = React.useMemo(function () {\n    return {\n      highlightedValue: itemComparer,\n      selectedValues: function selectedValues(valuesArray1, valuesArray2) {\n        return areArraysEqual(valuesArray1, valuesArray2, itemComparer);\n      }\n    };\n  }, [itemComparer]);\n\n  // This gets called whenever a reducer changes the state.\n  var handleStateChange = React.useCallback(function (event, field, value, reason, state) {\n    onStateChange == null ? void 0 : onStateChange(event, field, value, reason, state);\n    switch (field) {\n      case 'highlightedValue':\n        handleHighlightChange(event, value, reason);\n        break;\n      case 'selectedValues':\n        onChange == null ? void 0 : onChange(event, value, reason);\n        break;\n      default:\n        break;\n    }\n  }, [handleHighlightChange, onChange, onStateChange]);\n\n  // The following object is added to each action when it's dispatched.\n  // It's accessible in the reducer via the `action.context` field.\n  var listActionContext = React.useMemo(function () {\n    return {\n      disabledItemsFocusable: disabledItemsFocusable,\n      disableListWrap: disableListWrap,\n      focusManagement: focusManagement,\n      isItemDisabled: isItemDisabled,\n      itemComparer: itemComparer,\n      items: items,\n      getItemAsString: getItemAsString,\n      onHighlightChange: handleHighlightChange,\n      orientation: orientation,\n      pageSize: pageSize,\n      selectionMode: selectionMode,\n      stateComparers: stateComparers\n    };\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]);\n  var initialState = getInitialState();\n  var reducer = externalReducer != null ? externalReducer : defaultReducer;\n  var actionContext = React.useMemo(function () {\n    return _extends({}, reducerActionContext, listActionContext);\n  }, [reducerActionContext, listActionContext]);\n  var _useControllableReduc = useControllableReducer({\n      reducer: reducer,\n      actionContext: actionContext,\n      initialState: initialState,\n      controlledProps: controlledProps,\n      stateComparers: stateComparers,\n      onStateChange: handleStateChange\n    }),\n    _useControllableReduc2 = _slicedToArray(_useControllableReduc, 2),\n    state = _useControllableReduc2[0],\n    dispatch = _useControllableReduc2[1];\n  var highlightedValue = state.highlightedValue,\n    selectedValues = state.selectedValues;\n  var handleTextNavigation = useTextNavigation(function (searchString, event) {\n    return dispatch({\n      type: ListActionTypes.textNavigation,\n      event: event,\n      searchString: searchString\n    });\n  });\n\n  // introducing refs to avoid recreating the getItemState function on each change.\n  var latestSelectedValues = useLatest(selectedValues);\n  var latestHighlightedValue = useLatest(highlightedValue);\n  var previousItems = React.useRef([]);\n  React.useEffect(function () {\n    // Whenever the `items` object changes, we need to determine if the actual items changed.\n    // If they did, we need to dispatch an `itemsChange` action, so the selected/highlighted state is updated.\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.itemsChange,\n      event: null,\n      items: items,\n      previousItems: previousItems.current\n    });\n    previousItems.current = items;\n  }, [items, itemComparer, dispatch]);\n\n  // Subitems are notified of changes to the highlighted and selected values.\n  // This is not done via context because we don't want to trigger a re-render of all the subitems each time any of them changes state.\n  // Instead, we use a custom message bus to publish messages about changes.\n  // On the child component, we use a custom hook to subscribe to these messages and re-render only when the value they care about changes.\n  var _useListChangeNotifie = useListChangeNotifiers(),\n    notifySelectionChanged = _useListChangeNotifie.notifySelectionChanged,\n    notifyHighlightChanged = _useListChangeNotifie.notifyHighlightChanged,\n    registerHighlightChangeHandler = _useListChangeNotifie.registerHighlightChangeHandler,\n    registerSelectionChangeHandler = _useListChangeNotifie.registerSelectionChangeHandler;\n  React.useEffect(function () {\n    notifySelectionChanged(selectedValues);\n  }, [selectedValues, notifySelectionChanged]);\n  React.useEffect(function () {\n    notifyHighlightChanged(highlightedValue);\n  }, [highlightedValue, notifyHighlightChanged]);\n  var createHandleKeyDown = function createHandleKeyDown(other) {\n    return function (event) {\n      var _other$onKeyDown;\n      (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n      if (event.defaultMuiPrevented) {\n        return;\n      }\n      var keysToPreventDefault = ['Home', 'End', 'PageUp', 'PageDown'];\n      if (orientation === 'vertical') {\n        keysToPreventDefault.push('ArrowUp', 'ArrowDown');\n      } else {\n        keysToPreventDefault.push('ArrowLeft', 'ArrowRight');\n      }\n      if (focusManagement === 'activeDescendant') {\n        // When the child element is focused using the activeDescendant attribute,\n        // the list handles keyboard events on its behalf.\n        // We have to `preventDefault()` is this case to prevent the browser from\n        // scrolling the view when space is pressed or submitting forms when enter is pressed.\n        keysToPreventDefault.push(' ', 'Enter');\n      }\n      if (keysToPreventDefault.includes(event.key)) {\n        event.preventDefault();\n      }\n      dispatch({\n        type: ListActionTypes.keyDown,\n        key: event.key,\n        event: event\n      });\n      handleTextNavigation(event);\n    };\n  };\n  var createHandleBlur = function createHandleBlur(other) {\n    return function (event) {\n      var _other$onBlur, _listRef$current;\n      (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n      if (event.defaultMuiPrevented) {\n        return;\n      }\n      if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {\n        // focus remains within the list\n        return;\n      }\n      dispatch({\n        type: ListActionTypes.blur,\n        event: event\n      });\n    };\n  };\n  var getRootProps = function getRootProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? getItemId(highlightedValue) : undefined,\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers),\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef\n    });\n  };\n  var getItemState = React.useCallback(function (item) {\n    var _latestSelectedValues;\n    var index = items.findIndex(function (i) {\n      return itemComparer(i, item);\n    });\n    var selected = ((_latestSelectedValues = latestSelectedValues.current) != null ? _latestSelectedValues : []).some(function (value) {\n      return value != null && itemComparer(item, value);\n    });\n    var disabled = isItemDisabled(item, index);\n    var highlighted = latestHighlightedValue.current != null && itemComparer(item, latestHighlightedValue.current);\n    var focusable = focusManagement === 'DOM';\n    return {\n      disabled: disabled,\n      focusable: focusable,\n      highlighted: highlighted,\n      index: index,\n      selected: selected\n    };\n  }, [items, isItemDisabled, itemComparer, latestSelectedValues, latestHighlightedValue, focusManagement]);\n  var contextValue = React.useMemo(function () {\n    return {\n      dispatch: dispatch,\n      getItemState: getItemState,\n      registerHighlightChangeHandler: registerHighlightChangeHandler,\n      registerSelectionChangeHandler: registerSelectionChangeHandler\n    };\n  }, [dispatch, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  React.useDebugValue({\n    state: state\n  });\n  return {\n    contextValue: contextValue,\n    dispatch: dispatch,\n    getRootProps: getRootProps,\n    rootRef: handleRef,\n    state: state\n  };\n}\nexport default useList;","map":null,"metadata":{},"sourceType":"module"}