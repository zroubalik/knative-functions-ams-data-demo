{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useForcedRerendering from '../utils/useForcedRerendering';\nimport { ListActionTypes } from './listActions.types';\nimport { ListContext } from './ListContext';\n\n/**\n * Contains the logic for an item of a list-like component (e.g. Select, Menu, etc.).\n * It provides information about the item's state (selected, highlighted) and\n * handles the item's mouse events.\n *\n * @template ItemValue The type of the item's value. This should be consistent with the type of useList's `items` parameter.\n * @ignore - internal hook.\n */\nexport default function useListItem(parameters) {\n  var _parameters$handlePoi = parameters.handlePointerOverEvents,\n    handlePointerOverEvents = _parameters$handlePoi === void 0 ? false : _parameters$handlePoi,\n    item = parameters.item,\n    externalRef = parameters.rootRef;\n  var itemRef = React.useRef(null);\n  var handleRef = useForkRef(itemRef, externalRef);\n  var listContext = React.useContext(ListContext);\n  if (!listContext) {\n    throw new Error('useListItem must be used within a ListProvider');\n  }\n  var dispatch = listContext.dispatch,\n    getItemState = listContext.getItemState,\n    registerHighlightChangeHandler = listContext.registerHighlightChangeHandler,\n    registerSelectionChangeHandler = listContext.registerSelectionChangeHandler;\n  var _getItemState = getItemState(item),\n    highlighted = _getItemState.highlighted,\n    selected = _getItemState.selected,\n    focusable = _getItemState.focusable;\n  var rerender = useForcedRerendering();\n  useEnhancedEffect(function () {\n    function updateHighlightedState(highlightedItem) {\n      if (highlightedItem === item && !highlighted) {\n        rerender();\n      } else if (highlightedItem !== item && highlighted) {\n        rerender();\n      }\n    }\n    return registerHighlightChangeHandler(updateHighlightedState);\n  });\n  useEnhancedEffect(function () {\n    function updateSelectedState(selectedItems) {\n      if (!selected) {\n        if (selectedItems.includes(item)) {\n          rerender();\n        }\n      } else if (!selectedItems.includes(item)) {\n        rerender();\n      }\n    }\n    return registerSelectionChangeHandler(updateSelectedState);\n  }, [registerSelectionChangeHandler, rerender, selected, item]);\n  var createHandleClick = React.useCallback(function (other) {\n    return function (event) {\n      var _other$onClick;\n      (_other$onClick = other.onClick) == null ? void 0 : _other$onClick.call(other, event);\n      if (event.defaultPrevented) {\n        return;\n      }\n      dispatch({\n        type: ListActionTypes.itemClick,\n        item: item,\n        event: event\n      });\n    };\n  }, [dispatch, item]);\n  var createHandlePointerOver = React.useCallback(function (other) {\n    return function (event) {\n      var _other$onMouseOver;\n      (_other$onMouseOver = other.onMouseOver) == null ? void 0 : _other$onMouseOver.call(other, event);\n      if (event.defaultPrevented) {\n        return;\n      }\n      dispatch({\n        type: ListActionTypes.itemHover,\n        item: item,\n        event: event\n      });\n    };\n  }, [dispatch, item]);\n  var tabIndex;\n  if (focusable) {\n    tabIndex = highlighted ? 0 : -1;\n  }\n  var getRootProps = function getRootProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      onClick: createHandleClick(otherHandlers),\n      onPointerOver: handlePointerOverEvents ? createHandlePointerOver(otherHandlers) : undefined,\n      ref: handleRef,\n      tabIndex: tabIndex\n    });\n  };\n  return {\n    getRootProps: getRootProps,\n    highlighted: highlighted,\n    rootRef: handleRef,\n    selected: selected\n  };\n}","map":null,"metadata":{},"sourceType":"module"}