{"ast":null,"code":"import _toConsumableArray from \"/Users/zroubali/kubecon-eu-2023-demo/ams-data-app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nexport default function createGetCssVar() {\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  function appendVar() {\n    for (var _len = arguments.length, vars = new Array(_len), _key = 0; _key < _len; _key++) {\n      vars[_key] = arguments[_key];\n    }\n    if (!vars.length) {\n      return '';\n    }\n    var value = vars[0];\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\\d*\\.)?\\d+)$|(\\d+ \\d+ \\d+)/)) {\n      return \", var(--\".concat(prefix ? \"\".concat(prefix, \"-\") : '').concat(value).concat(appendVar.apply(void 0, _toConsumableArray(vars.slice(1))), \")\");\n    }\n    return \", \".concat(value);\n  }\n\n  // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n  var getCssVar = function getCssVar(field) {\n    for (var _len2 = arguments.length, fallbacks = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      fallbacks[_key2 - 1] = arguments[_key2];\n    }\n    return \"var(--\".concat(prefix ? \"\".concat(prefix, \"-\") : '').concat(field).concat(appendVar.apply(void 0, fallbacks), \")\");\n  };\n  return getCssVar;\n}","map":null,"metadata":{},"sourceType":"module"}