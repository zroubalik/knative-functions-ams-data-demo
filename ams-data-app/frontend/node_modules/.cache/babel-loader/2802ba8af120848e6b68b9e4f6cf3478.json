{"ast":null,"code":"import _defineProperty from \"/Users/zroubali/knative-functions-ams-data-demo/ams-data-app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/zroubali/knative-functions-ams-data-demo/ams-data-app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"children\", \"className\", \"only\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useTheme from '../styles/useTheme';\nimport { getHiddenCssUtilityClass } from './hiddenCssClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes,\n    breakpoints = ownerState.breakpoints;\n  var slots = {\n    root: ['root'].concat(_toConsumableArray(breakpoints.map(function (_ref) {\n      var breakpoint = _ref.breakpoint,\n        dir = _ref.dir;\n      return dir === 'only' ? \"\".concat(dir).concat(capitalize(breakpoint)) : \"\".concat(breakpoint).concat(capitalize(dir));\n    })))\n  };\n  return composeClasses(slots, getHiddenCssUtilityClass, classes);\n};\nvar HiddenCssRoot = styled('div', {\n  name: 'PrivateHiddenCss',\n  slot: 'Root'\n})(function (_ref2) {\n  var theme = _ref2.theme,\n    ownerState = _ref2.ownerState;\n  var hidden = {\n    display: 'none'\n  };\n  return _extends({}, ownerState.breakpoints.map(function (_ref3) {\n    var breakpoint = _ref3.breakpoint,\n      dir = _ref3.dir;\n    if (dir === 'only') {\n      return _defineProperty({}, theme.breakpoints.only(breakpoint), hidden);\n    }\n    return dir === 'up' ? _defineProperty({}, theme.breakpoints.up(breakpoint), hidden) : _defineProperty({}, theme.breakpoints.down(breakpoint), hidden);\n  }).reduce(function (r, o) {\n    Object.keys(o).forEach(function (k) {\n      r[k] = o[k];\n    });\n    return r;\n  }, {}));\n});\n\n/**\n * @ignore - internal component.\n */\nfunction HiddenCss(props) {\n  var children = props.children,\n    className = props.className,\n    only = props.only,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var theme = useTheme();\n  if (process.env.NODE_ENV !== 'production') {\n    var unknownProps = Object.keys(other).filter(function (propName) {\n      var isUndeclaredBreakpoint = !theme.breakpoints.keys.some(function (breakpoint) {\n        return \"\".concat(breakpoint, \"Up\") === propName || \"\".concat(breakpoint, \"Down\") === propName;\n      });\n      return !['classes', 'theme', 'isRtl', 'sx'].includes(propName) && isUndeclaredBreakpoint;\n    });\n    if (unknownProps.length > 0) {\n      console.error(\"MUI: Unsupported props received by `<Hidden implementation=\\\"css\\\" />`: \".concat(unknownProps.join(', '), \". Did you forget to wrap this component in a ThemeProvider declaring these breakpoints?\"));\n    }\n  }\n  var breakpoints = [];\n  for (var i = 0; i < theme.breakpoints.keys.length; i += 1) {\n    var breakpoint = theme.breakpoints.keys[i];\n    var breakpointUp = other[\"\".concat(breakpoint, \"Up\")];\n    var breakpointDown = other[\"\".concat(breakpoint, \"Down\")];\n    if (breakpointUp) {\n      breakpoints.push({\n        breakpoint: breakpoint,\n        dir: 'up'\n      });\n    }\n    if (breakpointDown) {\n      breakpoints.push({\n        breakpoint: breakpoint,\n        dir: 'down'\n      });\n    }\n  }\n  if (only) {\n    var onlyBreakpoints = Array.isArray(only) ? only : [only];\n    onlyBreakpoints.forEach(function (breakpoint) {\n      breakpoints.push({\n        breakpoint: breakpoint,\n        dir: 'only'\n      });\n    });\n  }\n  var ownerState = _extends({}, props, {\n    breakpoints: breakpoints\n  });\n  var classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(HiddenCssRoot, {\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? HiddenCss.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Specify which implementation to use.  'js' is the default, 'css' works better for\n   * server-side rendering.\n   */\n  implementation: PropTypes.oneOf(['js', 'css']),\n  /**\n   * If `true`, screens this size and down are hidden.\n   */\n  lgDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up are hidden.\n   */\n  lgUp: PropTypes.bool,\n  /**\n   * If `true`, screens this size and down are hidden.\n   */\n  mdDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up are hidden.\n   */\n  mdUp: PropTypes.bool,\n  /**\n   * Hide the given breakpoint(s).\n   */\n  only: PropTypes.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),\n  /**\n   * If `true`, screens this size and down are hidden.\n   */\n  smDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up are hidden.\n   */\n  smUp: PropTypes.bool,\n  /**\n   * If `true`, screens this size and down are hidden.\n   */\n  xlDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up are hidden.\n   */\n  xlUp: PropTypes.bool,\n  /**\n   * If `true`, screens this size and down are hidden.\n   */\n  xsDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up are hidden.\n   */\n  xsUp: PropTypes.bool\n} : void 0;\nexport default HiddenCss;","map":null,"metadata":{},"sourceType":"module"}