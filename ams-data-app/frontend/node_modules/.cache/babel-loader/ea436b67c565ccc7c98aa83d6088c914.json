{"ast":null,"code":"import _defineProperty from \"/Users/zroubali/knative-functions-ams-data-demo/ams-data-app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"addEndListener\", \"children\", \"className\", \"collapsedSize\", \"component\", \"easing\", \"in\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"orientation\", \"style\", \"timeout\", \"TransitionComponent\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { duration } from '../styles/createTransitions';\nimport { getTransitionProps } from '../transitions/utils';\nimport useTheme from '../styles/useTheme';\nimport { useForkRef } from '../utils';\nimport { getCollapseUtilityClass } from './collapseClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var orientation = ownerState.orientation,\n    classes = ownerState.classes;\n  var slots = {\n    root: ['root', \"\".concat(orientation)],\n    entered: ['entered'],\n    hidden: ['hidden'],\n    wrapper: ['wrapper', \"\".concat(orientation)],\n    wrapperInner: ['wrapperInner', \"\".concat(orientation)]\n  };\n  return composeClasses(slots, getCollapseUtilityClass, classes);\n};\nvar CollapseRoot = styled('div', {\n  name: 'MuiCollapse',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    var ownerState = props.ownerState;\n    return [styles.root, styles[ownerState.orientation], ownerState.state === 'entered' && styles.entered, ownerState.state === 'exited' && !ownerState.in && ownerState.collapsedSize === '0px' && styles.hidden];\n  }\n})(function (_ref) {\n  var theme = _ref.theme,\n    ownerState = _ref.ownerState;\n  return _extends({\n    height: 0,\n    overflow: 'hidden',\n    transition: theme.transitions.create('height')\n  }, ownerState.orientation === 'horizontal' && {\n    height: 'auto',\n    width: 0,\n    transition: theme.transitions.create('width')\n  }, ownerState.state === 'entered' && _extends({\n    height: 'auto',\n    overflow: 'visible'\n  }, ownerState.orientation === 'horizontal' && {\n    width: 'auto'\n  }), ownerState.state === 'exited' && !ownerState.in && ownerState.collapsedSize === '0px' && {\n    visibility: 'hidden'\n  });\n});\nvar CollapseWrapper = styled('div', {\n  name: 'MuiCollapse',\n  slot: 'Wrapper',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.wrapper;\n  }\n})(function (_ref2) {\n  var ownerState = _ref2.ownerState;\n  return _extends({\n    // Hack to get children with a negative margin to not falsify the height computation.\n    display: 'flex',\n    width: '100%'\n  }, ownerState.orientation === 'horizontal' && {\n    width: 'auto',\n    height: '100%'\n  });\n});\nvar CollapseWrapperInner = styled('div', {\n  name: 'MuiCollapse',\n  slot: 'WrapperInner',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.wrapperInner;\n  }\n})(function (_ref3) {\n  var ownerState = _ref3.ownerState;\n  return _extends({\n    width: '100%'\n  }, ownerState.orientation === 'horizontal' && {\n    width: 'auto',\n    height: '100%'\n  });\n});\n\n/**\n * The Collapse transition is used by the\n * [Vertical Stepper](/material-ui/react-stepper/#vertical-stepper) StepContent component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\nvar Collapse = /*#__PURE__*/React.forwardRef(function Collapse(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiCollapse'\n  });\n  var addEndListener = props.addEndListener,\n    _children = props.children,\n    className = props.className,\n    _props$collapsedSize = props.collapsedSize,\n    collapsedSizeProp = _props$collapsedSize === void 0 ? '0px' : _props$collapsedSize,\n    component = props.component,\n    easing = props.easing,\n    inProp = props.in,\n    onEnter = props.onEnter,\n    onEntered = props.onEntered,\n    onEntering = props.onEntering,\n    onExit = props.onExit,\n    onExited = props.onExited,\n    onExiting = props.onExiting,\n    _props$orientation = props.orientation,\n    orientation = _props$orientation === void 0 ? 'vertical' : _props$orientation,\n    style = props.style,\n    _props$timeout = props.timeout,\n    timeout = _props$timeout === void 0 ? duration.standard : _props$timeout,\n    _props$TransitionComp = props.TransitionComponent,\n    TransitionComponent = _props$TransitionComp === void 0 ? Transition : _props$TransitionComp,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var ownerState = _extends({}, props, {\n    orientation: orientation,\n    collapsedSize: collapsedSizeProp\n  });\n  var classes = useUtilityClasses(ownerState);\n  var theme = useTheme();\n  var timer = React.useRef();\n  var wrapperRef = React.useRef(null);\n  var autoTransitionDuration = React.useRef();\n  var collapsedSize = typeof collapsedSizeProp === 'number' ? \"\".concat(collapsedSizeProp, \"px\") : collapsedSizeProp;\n  var isHorizontal = orientation === 'horizontal';\n  var size = isHorizontal ? 'width' : 'height';\n  React.useEffect(function () {\n    return function () {\n      clearTimeout(timer.current);\n    };\n  }, []);\n  var nodeRef = React.useRef(null);\n  var handleRef = useForkRef(ref, nodeRef);\n  var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {\n    return function (maybeIsAppearing) {\n      if (callback) {\n        var node = nodeRef.current;\n\n        // onEnterXxx and onExitXxx callbacks have a different arguments.length value.\n        if (maybeIsAppearing === undefined) {\n          callback(node);\n        } else {\n          callback(node, maybeIsAppearing);\n        }\n      }\n    };\n  };\n  var getWrapperSize = function getWrapperSize() {\n    return wrapperRef.current ? wrapperRef.current[isHorizontal ? 'clientWidth' : 'clientHeight'] : 0;\n  };\n  var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {\n    if (wrapperRef.current && isHorizontal) {\n      // Set absolute position to get the size of collapsed content\n      wrapperRef.current.style.position = 'absolute';\n    }\n    node.style[size] = collapsedSize;\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  });\n  var handleEntering = normalizedTransitionCallback(function (node, isAppearing) {\n    var wrapperSize = getWrapperSize();\n    if (wrapperRef.current && isHorizontal) {\n      // After the size is read reset the position back to default\n      wrapperRef.current.style.position = '';\n    }\n    var _getTransitionProps = getTransitionProps({\n        style: style,\n        timeout: timeout,\n        easing: easing\n      }, {\n        mode: 'enter'\n      }),\n      transitionDuration = _getTransitionProps.duration,\n      transitionTimingFunction = _getTransitionProps.easing;\n    if (timeout === 'auto') {\n      var duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);\n      node.style.transitionDuration = \"\".concat(duration2, \"ms\");\n      autoTransitionDuration.current = duration2;\n    } else {\n      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : \"\".concat(transitionDuration, \"ms\");\n    }\n    node.style[size] = \"\".concat(wrapperSize, \"px\");\n    node.style.transitionTimingFunction = transitionTimingFunction;\n    if (onEntering) {\n      onEntering(node, isAppearing);\n    }\n  });\n  var handleEntered = normalizedTransitionCallback(function (node, isAppearing) {\n    node.style[size] = 'auto';\n    if (onEntered) {\n      onEntered(node, isAppearing);\n    }\n  });\n  var handleExit = normalizedTransitionCallback(function (node) {\n    node.style[size] = \"\".concat(getWrapperSize(), \"px\");\n    if (onExit) {\n      onExit(node);\n    }\n  });\n  var handleExited = normalizedTransitionCallback(onExited);\n  var handleExiting = normalizedTransitionCallback(function (node) {\n    var wrapperSize = getWrapperSize();\n    var _getTransitionProps2 = getTransitionProps({\n        style: style,\n        timeout: timeout,\n        easing: easing\n      }, {\n        mode: 'exit'\n      }),\n      transitionDuration = _getTransitionProps2.duration,\n      transitionTimingFunction = _getTransitionProps2.easing;\n    if (timeout === 'auto') {\n      // TODO: rename getAutoHeightDuration to something more generic (width support)\n      // Actually it just calculates animation duration based on size\n      var duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);\n      node.style.transitionDuration = \"\".concat(duration2, \"ms\");\n      autoTransitionDuration.current = duration2;\n    } else {\n      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : \"\".concat(transitionDuration, \"ms\");\n    }\n    node.style[size] = collapsedSize;\n    node.style.transitionTimingFunction = transitionTimingFunction;\n    if (onExiting) {\n      onExiting(node);\n    }\n  });\n  var handleAddEndListener = function handleAddEndListener(next) {\n    if (timeout === 'auto') {\n      timer.current = setTimeout(next, autoTransitionDuration.current || 0);\n    }\n    if (addEndListener) {\n      // Old call signature before `react-transition-group` implemented `nodeRef`\n      addEndListener(nodeRef.current, next);\n    }\n  };\n  return /*#__PURE__*/_jsx(TransitionComponent, _extends({\n    in: inProp,\n    onEnter: handleEnter,\n    onEntered: handleEntered,\n    onEntering: handleEntering,\n    onExit: handleExit,\n    onExited: handleExited,\n    onExiting: handleExiting,\n    addEndListener: handleAddEndListener,\n    nodeRef: nodeRef,\n    timeout: timeout === 'auto' ? null : timeout\n  }, other, {\n    children: function children(state, childProps) {\n      return /*#__PURE__*/_jsx(CollapseRoot, _extends({\n        as: component,\n        className: clsx(classes.root, className, {\n          'entered': classes.entered,\n          'exited': !inProp && collapsedSize === '0px' && classes.hidden\n        }[state]),\n        style: _extends(_defineProperty({}, isHorizontal ? 'minWidth' : 'minHeight', collapsedSize), style),\n        ownerState: _extends({}, ownerState, {\n          state: state\n        }),\n        ref: handleRef\n      }, childProps, {\n        children: /*#__PURE__*/_jsx(CollapseWrapper, {\n          ownerState: _extends({}, ownerState, {\n            state: state\n          }),\n          className: classes.wrapper,\n          ref: wrapperRef,\n          children: /*#__PURE__*/_jsx(CollapseWrapperInner, {\n            ownerState: _extends({}, ownerState, {\n              state: state\n            }),\n            className: classes.wrapperInner,\n            children: _children\n          })\n        })\n      }));\n    }\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Collapse.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * Add a custom transition end trigger. Called with the transitioning DOM\n   * node and a done callback. Allows for more fine grained transition end\n   * logic. Note: Timeouts are still used as a fallback if provided.\n   */\n  addEndListener: PropTypes.func,\n  /**\n   * The content node to be collapsed.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The width (horizontal) or height (vertical) of the container when collapsed.\n   * @default '0px'\n   */\n  collapsedSize: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n  /**\n   * The transition timing function.\n   * You may specify a single easing or a object containing enter and exit values.\n   */\n  easing: PropTypes.oneOfType([PropTypes.shape({\n    enter: PropTypes.string,\n    exit: PropTypes.string\n  }), PropTypes.string]),\n  /**\n   * If `true`, the component will transition in.\n   */\n  in: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onEnter: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onEntered: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onEntering: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onExit: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onExited: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onExiting: PropTypes.func,\n  /**\n   * The transition orientation.\n   * @default 'vertical'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   *\n   * Set to 'auto' to automatically calculate transition time based on height.\n   * @default duration.standard\n   */\n  timeout: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })])\n} : void 0;\nCollapse.muiSupportAuto = true;\nexport default Collapse;","map":null,"metadata":{},"sourceType":"module"}