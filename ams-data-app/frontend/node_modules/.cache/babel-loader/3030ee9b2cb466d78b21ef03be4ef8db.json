{"ast":null,"code":"import * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var DEFAULT_MODE_STORAGE_KEY = 'mode';\nexport var DEFAULT_COLOR_SCHEME_STORAGE_KEY = 'color-scheme';\nexport var DEFAULT_ATTRIBUTE = 'data-color-scheme';\nexport default function getInitColorSchemeScript(options) {\n  var _ref = options || {},\n    _ref$defaultMode = _ref.defaultMode,\n    defaultMode = _ref$defaultMode === void 0 ? 'light' : _ref$defaultMode,\n    _ref$defaultLightColo = _ref.defaultLightColorScheme,\n    defaultLightColorScheme = _ref$defaultLightColo === void 0 ? 'light' : _ref$defaultLightColo,\n    _ref$defaultDarkColor = _ref.defaultDarkColorScheme,\n    defaultDarkColorScheme = _ref$defaultDarkColor === void 0 ? 'dark' : _ref$defaultDarkColor,\n    _ref$modeStorageKey = _ref.modeStorageKey,\n    modeStorageKey = _ref$modeStorageKey === void 0 ? DEFAULT_MODE_STORAGE_KEY : _ref$modeStorageKey,\n    _ref$colorSchemeStora = _ref.colorSchemeStorageKey,\n    colorSchemeStorageKey = _ref$colorSchemeStora === void 0 ? DEFAULT_COLOR_SCHEME_STORAGE_KEY : _ref$colorSchemeStora,\n    _ref$attribute = _ref.attribute,\n    attribute = _ref$attribute === void 0 ? DEFAULT_ATTRIBUTE : _ref$attribute,\n    _ref$colorSchemeNode = _ref.colorSchemeNode,\n    colorSchemeNode = _ref$colorSchemeNode === void 0 ? 'document.documentElement' : _ref$colorSchemeNode;\n  return /*#__PURE__*/_jsx(\"script\", {\n    // eslint-disable-next-line react/no-danger\n    dangerouslySetInnerHTML: {\n      __html: \"(function() { try {\\n        var mode = localStorage.getItem('\".concat(modeStorageKey, \"') || '\").concat(defaultMode, \"';\\n        var cssColorScheme = mode;\\n        var colorScheme = '';\\n        if (mode === 'system') {\\n          // handle system mode\\n          var mql = window.matchMedia('(prefers-color-scheme: dark)');\\n          if (mql.matches) {\\n            cssColorScheme = 'dark';\\n            colorScheme = localStorage.getItem('\").concat(colorSchemeStorageKey, \"-dark') || '\").concat(defaultDarkColorScheme, \"';\\n          } else {\\n            cssColorScheme = 'light';\\n            colorScheme = localStorage.getItem('\").concat(colorSchemeStorageKey, \"-light') || '\").concat(defaultLightColorScheme, \"';\\n          }\\n        }\\n        if (mode === 'light') {\\n          colorScheme = localStorage.getItem('\").concat(colorSchemeStorageKey, \"-light') || '\").concat(defaultLightColorScheme, \"';\\n        }\\n        if (mode === 'dark') {\\n          colorScheme = localStorage.getItem('\").concat(colorSchemeStorageKey, \"-dark') || '\").concat(defaultDarkColorScheme, \"';\\n        }\\n        if (colorScheme) {\\n          \").concat(colorSchemeNode, \".setAttribute('\").concat(attribute, \"', colorScheme);\\n        }\\n      } catch (e) {} })();\")\n    }\n  }, \"mui-color-scheme-init\");\n}","map":null,"metadata":{},"sourceType":"module"}