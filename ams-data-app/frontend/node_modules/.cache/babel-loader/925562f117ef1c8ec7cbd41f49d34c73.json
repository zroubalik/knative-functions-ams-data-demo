{"ast":null,"code":"import _defineProperty from \"/Users/zroubali/knative-functions-ams-data-demo/ams-data-app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { unstable_capitalize as capitalize } from '@mui/utils';\nimport merge from '../merge';\nimport { getPath, getStyleValue as getValue } from '../style';\nimport { handleBreakpoints, createEmptyBreakpointObject, removeUnusedBreakpoints } from '../breakpoints';\nimport defaultSxConfig from './defaultSxConfig';\nfunction objectsHaveSameKeys() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n  var allKeys = objects.reduce(function (keys, object) {\n    return keys.concat(Object.keys(object));\n  }, []);\n  var union = new Set(allKeys);\n  return objects.every(function (object) {\n    return union.size === Object.keys(object).length;\n  });\n}\nfunction callIfFn(maybeFn, arg) {\n  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function unstable_createStyleFunctionSx() {\n  function getThemeValue(prop, val, theme, config) {\n    var _props;\n    var props = (_props = {}, _defineProperty(_props, prop, val), _defineProperty(_props, \"theme\", theme), _props);\n    var options = config[prop];\n    if (!options) {\n      return _defineProperty({}, prop, val);\n    }\n    var _options$cssProperty = options.cssProperty,\n      cssProperty = _options$cssProperty === void 0 ? prop : _options$cssProperty,\n      themeKey = options.themeKey,\n      transform = options.transform,\n      style = options.style;\n    if (val == null) {\n      return null;\n    }\n    if (themeKey === 'typography' && val === 'inherit') {\n      return _defineProperty({}, prop, val);\n    }\n    var themeMapping = getPath(theme, themeKey) || {};\n    if (style) {\n      return style(props);\n    }\n    var styleFromPropValue = function styleFromPropValue(propValueFinal) {\n      var value = getValue(themeMapping, transform, propValueFinal);\n      if (propValueFinal === value && typeof propValueFinal === 'string') {\n        // Haven't found value\n        value = getValue(themeMapping, transform, \"\".concat(prop).concat(propValueFinal === 'default' ? '' : capitalize(propValueFinal)), propValueFinal);\n      }\n      if (cssProperty === false) {\n        return value;\n      }\n      return _defineProperty({}, cssProperty, value);\n    };\n    return handleBreakpoints(props, val, styleFromPropValue);\n  }\n  function styleFunctionSx(props) {\n    var _theme$unstable_sxCon;\n    var _ref4 = props || {},\n      sx = _ref4.sx,\n      _ref4$theme = _ref4.theme,\n      theme = _ref4$theme === void 0 ? {} : _ref4$theme;\n    if (!sx) {\n      return null; // Emotion & styled-components will neglect null\n    }\n\n    var config = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig;\n\n    /*\n     * Receive `sxInput` as object or callback\n     * and then recursively check keys & values to create media query object styles.\n     * (the result will be used in `styled`)\n     */\n    function traverse(sxInput) {\n      var sxObject = sxInput;\n      if (typeof sxInput === 'function') {\n        sxObject = sxInput(theme);\n      } else if (typeof sxInput !== 'object') {\n        // value\n        return sxInput;\n      }\n      if (!sxObject) {\n        return null;\n      }\n      var emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);\n      var breakpointsKeys = Object.keys(emptyBreakpoints);\n      var css = emptyBreakpoints;\n      Object.keys(sxObject).forEach(function (styleKey) {\n        var value = callIfFn(sxObject[styleKey], theme);\n        if (value !== null && value !== undefined) {\n          if (typeof value === 'object') {\n            if (config[styleKey]) {\n              css = merge(css, getThemeValue(styleKey, value, theme, config));\n            } else {\n              var breakpointsValues = handleBreakpoints({\n                theme: theme\n              }, value, function (x) {\n                return _defineProperty({}, styleKey, x);\n              });\n              if (objectsHaveSameKeys(breakpointsValues, value)) {\n                css[styleKey] = styleFunctionSx({\n                  sx: value,\n                  theme: theme\n                });\n              } else {\n                css = merge(css, breakpointsValues);\n              }\n            }\n          } else {\n            css = merge(css, getThemeValue(styleKey, value, theme, config));\n          }\n        }\n      });\n      return removeUnusedBreakpoints(breakpointsKeys, css);\n    }\n    return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);\n  }\n  return styleFunctionSx;\n}\nvar styleFunctionSx = unstable_createStyleFunctionSx();\nstyleFunctionSx.filterProps = ['sx'];\nexport default styleFunctionSx;","map":null,"metadata":{},"sourceType":"module"}